import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv('salary1.csv')
df.head()

df.shape

sns.heatmap(df.isnull())
plt.show()

#Here the Data doesn't contain any Null Values and the Data Types for each feature seems accurate. 
#Checking for any DUPLICATED row. If there are any then they need to be deleted. 

df[df.duplicated()]

#No DUPLICATED values found in the dataset

#Dividing the Data into Categorical and Numerical 

df_num=df.select_dtypes('int64')
df_cat=df.select_dtypes('object')
columns=df_cat.columns
#Applying Label Encoder

from sklearn.preprocessing import LabelEncoder

for col in columns:
    le=LabelEncoder()
    df_cat[col]=le.fit_transform(df_cat[col])
    
    df_cat
    
    #Combining both Categorical and Numerical Data
df_new=pd.concat([df_cat,df_num],axis=1)
df_new

#Applying Standard Scaling on new data set

from sklearn.preprocessing import StandardScaler

#Selecting Input and Output Data
X=df_new.drop('Income',axis=1) #Input
Y=df_new['Income']#Output

from sklearn.model_selection import train_test_split

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3,random_state=1)

#Applying Standard Scaler on input X_train and X_test

#Creating Object of StandardScaler

ss=StandardScaler()

X_train=ss.fit_transform(X_train)
X_test=ss.transform(X_test)

from sklearn.linear_model import LogisticRegression

#Creating Object
lr=LogisticRegression()
#Training with 70% data
lr.fit(X_train,Y_train)

#Test the model with 30% data, use inbuilt method predict()
Y_pred=lr.predict(X_test) 
Y_pred

#Comparing the Actual and Predicted Output
dic={'Actual Output':Y_test,'Predicted Output':Y_pred}
#Covert into DataFrame
df1=pd.DataFrame(dic)
df1

#Check Accuracy of Model, Use inbuilt method score() of LogisticRegression 
lr.score(X_test,Y_test) 

lr.score(X_train,Y_train) 

#Evaluation of the model 
#Checking the Classification Report
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix

print(classification_report(Y_test,Y_pred))

print(confusion_matrix(Y_test,Y_pred))

#Clearly Data is imbalance
